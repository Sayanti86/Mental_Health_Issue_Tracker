n = n())
x <- hurricane_summary%>%
mutate(name= fct_reorder(name,max_wind))
ggplot(x, aes(max_wind, name)) + geom_point()
hurricane_07 <- storms %>%
filter(status == "hurricane", year == 2007) %>%
select(name, category) %>%
droplevels()
(hurricane_07 <- storms %>%
filter(status == "hurricane", year == 2007) %>%
select(name, category) %>%
droplevels())
(desc <- tribble(
~ category,                   ~ damage,
1L,               "some damage",
2L,          "extensive damage",
3L,        "devastating damage",
4L,       "catastrophic damage",
5L, "worst catastrophic damage"
))
desc<- desc %>%
mutate(category =
factor(category, levels = unique(category), ordered = TRUE)
)
(desc<- desc %>%
mutate(category =
factor(category, levels = unique(category), ordered = TRUE)
))
(new_data <- left_join(hurricane_07,desc))
fct_count(x$status)
y <- storms%>%
filter(status=="hurricane")%>%
droplevels()
fct_count(y$status)
y <- storms%>%
filter(status!="hurricane")%>%
droplevels()
fct_count(y$status)
x <- storms%>%
filter(status!="hurricane")%>%
mutate(status = fct_drop(status))
fct_count(x$status)
hurricane_summary <- storms %>%
filter(status == "hurricane", year > 2005) %>%
group_by(name) %>%
summarise(
max_wind = max(wind, na.rm = TRUE),
n = n())
x <- hurricane_summary%>%
mutate(name= fct_reorder(max_wind,name))
x <- hurricane_summary%>%
mutate(name= fct_reorder(name,max_wind))
df1 <-  storms%>%
filter(name %in% c("Caroline", "Doris")) %>%
select(c(name, status, year, category)) %>%
droplevels()
df2 <-  storms%>%
filter(name %in% c("Anita", "David")) %>%
select(c(name, status, year, category)) %>%
droplevels()
v1 <- df1$name
v2 <- df2$name
levels(v1)
levels(v2)
(new_vec <- fct_c(df1$v1,df2$v2))
(new_vec <- fct_c(df1$name,df2$name))
(new_vec1 <- fct_c(v1,v2))
bind_rows(df1, df2)
rbind(df1, df2)
DSCI523_list <- list("Instructor" = "Jenny","TF" = "Shaun", "TA" = list("Aaron", "Moahmed"))
(DSCI523_list <- list("Instructor" = "Jenny","TF" = "Shaun", "TA" = list("Aaron", "Moahmed")))
DSCI523_list[2]
DSCI523_list[[2]]
DSCI523_list$TF
DSCI523_list$TA[1]
derby_winners <- c("Orb",                           ## statement 1
"Macbeth II",
"Vagrant",
"Tomy Lee",
"Burgoo King",
"Citation",
"Lord Murphy",
"His Eminence",
"Count Turf",
"Dust Commander")
(derby_winners <- c("Orb",                           ## statement 1
"Macbeth II",
"Vagrant",
"Tomy Lee",
"Burgoo King",
"Citation",
"Lord Murphy",
"His Eminence",
"Count Turf",
"Dust Commander"))
(derby_list <- stringr::str_split(derby_winners, " "))
str(derby_list)
str(derby_winners)
(derby_list %>% purrr::map_int(length))
(deby_list2<- map(derby_list ,paste(.x , ~collapse = "_"))
)
(deby_list2<- map(derby_list ,paste(.x , ~collapse = "_")))
(deby_list2<- map_chr(derby_list ,paste(.x , ~collapse = "_")))
(deby_list2<- map_chr(derby_list ,~paste(.x ,collapse = "_")))
map(derby_list, ~if_else(!is.na(.x[2]), str_c(.x[1], .x[2], sep = "_"), .x[1]))
(derby_list2 <- stringr::str_split(deby_list2, " "))
(food <- gapminder %>%
filter(country %in% c("Italy","Germany","Japan","Mexico"))%>%
droplevels())
library(gapminder)
(food <- gapminder %>%
filter(country %in% c("Italy","Germany","Japan","Mexico"))%>%
droplevels())
food$country%>%
fct_recode("Italy"="Pizza")
food<-food$country%>%
fct_recode("Italy"="Pizza")
food
food$country<-food$country%>%
fct_recode("Italy"="Pizza")
(food <- gapminder %>%
filter(country %in% c("Italy","Germany","Japan","Mexico"))%>%
droplevels())
food$country<-food$country%>%
fct_recode("Italy"="Pizza")
food
food%>%
filter(continent=="Pizza")
food%>%
filter(continent=="Italy")
food%>%
filter(country=="Italy")
food%>%
filter(country=="Pizza")
food$country<-food$country%>%
fct_recode("Italy"="Pizza",
"Germany"="Beer",
"Japan"="sushi",
"Mexico"="Tacco")
(food <- gapminder %>%
filter(country %in% c("Italy","Germany","Japan","Mexico"))%>%
droplevels())
food$country<-food$country%>%
fct_recode("Italy"="Pizza",
"Germany"="Beer",
"Japan"="sushi",
"Mexico"="Tacco")
food%>%
filter(country=="Pizza")
food$country
(food$country<-food$country%>%
fct_recode("Italy"="Pizza",
"Germany"="Beer",
"Japan"="sushi",
"Mexico"="Tacco"))
(food$country <- food$country%>%
fct_recode(
"Pizza" = "Italy",
"Sausages" = "Germany",
"Sushi" ="Japan",
"Tacco" = "Mexico"
))
food%>%
filter(country=="Pizza")
install.packages("RSQLite")
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
dbWriteTable(con, "flights", nycflights13)
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
dbWriteTable(con, "nycflights13", flights)
dbListTables(con)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
dbWriteTable(con, "flights", nycflights13)
dbListTables(con)
?dbWriteTable
head(mtcars)
head(nycflights13)
head(flights)
library(nycflights13)
head(flights)
dbWriteTable(con, "flights", flights)
dbListTables(con)
dbWriteTable(con, "airports", airports)
dbListTables(con)
dbWriteTable(con, "planes", planes)
dbListTables(con)
library(DBI)
# Create an ephemeral in-memory RSQLite database
flights <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(flights)
dbWriteTable(flights, "planes", planes)
dbListTables(flights)
dbWriteTable(flights, "airports", airports)
dbListTables(flights)
dbWriteTable(flights, "flights", flights)
dbListTables(flights)
library(DBI)
> # Create an ephemeral in-memory RSQLite database
> flight <- dbConnect(RSQLite::SQLite(), ":memory:")
>
> dbListTables(flight)
library(DBI)
# Create an ephemeral in-memory RSQLite database
flight <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(flight)
dbWriteTable(flight, "flights", flights)
dbListTables(flight)
dbWriteTable(flight, "airports", airports)
dbListTables(flight)
dbWriteTable(flight, "planes", planes)
dbListTables(flight)
dbWriteTable(flight, "flights", flights)
dbListTables(flight)
dbListTables(con)
# Disconnect from the database
dbDisconnect(con)
dbListTables(con)
dbDisconnect(flights)
dbDisconnect(flight)
flight <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flight, "flights", flights)
flight.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flight.db, "flights", flights)
flight.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flight.db, "flights", flights)
dbDisconnect(flights.db)
flight <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flight, "flights", flights)
dbDisconnect(flight)
flights <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights, "flights", flights)
dbDisconnect(flights)
flight <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flight, "flights", flights)
dbWriteTable(flight, "planes", planes)
dbWriteTable(flight, "airports", airports)
dbListTables(flight)
dbDisconnect(flight)
dbListTables(flight)
con <- dbConnect(RSQLite::SQLite(), dbname="flights.db")
con <- dbConnect(RSQLite::SQLite(), dbname="flights.db")
dbWriteTable(con, "flights", flights)
dbWriteTable(con, "planes", planes)
dbWriteTable(con, "airports", airports)
dbListTables(flights.db)
dbListTables(con,flights.db)
dbDisconnect(con,flights.db)
con <- dbConnect(RSQLite::SQLite(), dbname="flights.db")
dbListTables(con,flights.db)
my_flights_2008 <- dbReadTable(con, "flights")
head(my_flights_2008)
dbListTables(con,flights.db)
con <- dbConnect(RSQLite::SQLite(), dbname="flights.db")
dbListTables(con,flights.db)
dbDisconnect(con,flights.db)
dbListTables(con,flights.db)
con <- dbConnect(RSQLite::SQLite(), dbname="flights.db")
dbListTables(con,flights.db)
flights_2008 <- dbReadTable(con, "flights")
flights_csv <-tbl(con,"flights")
flights_2008 <- dbReadTable(con, "flights")
head(flights_2008)
dbListTables(con)
dbDisconnect(con,flights.db)
con <- dbConnect(RSQLite::SQLite(), dbname="flights.db")
library(DBI)
con <- dbConnect(RSQLite::SQLite(), dbname="flights.db")
dbListTables(con)
dbDisconnect(con,flights.db)
con <- dbConnect(RSQLite::SQLite(), dbname="flights2008.db")
dbDisconnect(con,flights2008.db)
con <- dbConnect(RSQLite::SQLite(), dbname="flights2008.db")
dbListTables(con)
flight2008<- dbReadTable(con, "flights")
dbWriteTable(con, "flights", flights)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), dbname="flights2008.db")
dbListTables(con)
x<-dbListTables(con)
x
con <- dbConnect(RSQLite::SQLite(), dbname="flights2008")
x<-dbListTables(con)
x
filename <- "flights2008.db"
filename
sqlite.driver <- dbDriver("SQLite")
db <- dbConnect(sqlite.driver,
dbname = filename)
db
dbListTables(db)
f<- "C:\Users\soumi\Documents\Block3\DSCI_513\DSCI_513_lab1_sayanti\flights2008.db"
f<- "C:\\Users\\soumi\\Documents\\Block3\\DSCI_513\\DSCI_513_lab1_sayanti\\flights2008.db"
db <- dbConnect(sqlite.driver,
+                 dbname = f)
db <- dbConnect(sqlite.driver,
dbname = f)
db
dbListTables(db)
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
library(dplyr)
library(tidyr)
library(tidyverse)
con = dbConnect(SQLite(), "flightsdata.db")
dbListTables(con)
flight_data <- tbl(con, "flights")
#View(flight_data)
head(flight_data)
flight_data %>%
arrange(Origin)%>%
group_by(Origin)%>%
#filter(DepTime>0)%>%
tally() %>%
arrange(desc(n))
airports1<- flight_data%>%
group_by(Dest)%>%
filter(ArrDelay>30)
count_flight<-airports1 %>%
group_by(Dest)%>%
summarize(tot=n())%>%
filter(tot>2500)
(plot1 <- ggplot((data = count_flight))+
geom_point(aes(Dest,tot))+
ggtitle("Flights with Arrival Delay > 30 for airports")+
xlab("Aiports")+
ylab("Count of arrival delayed flights")+
theme_bw()+
theme(plot.title = element_text(hjust=0.5),axis.text.x = element_text(angle = 90, hjust = 1 )))
knitr::opts_chunk$set(echo = TRUE)
count_flight1<-flight_data %>%
group_by(Dest)%>%
filter(ArrDelay>30)
library(RSQLite)
library(dplyr)
library(tidyr)
library(tidyverse)
con = dbConnect(SQLite(), "flightsdata.db")
dbListTables(con)
flight_data <- tbl(con, "flights")
#View(flight_data)
head(flight_data)
flight_data %>%
arrange(Origin)%>%
group_by(Origin)%>%
#filter(DepTime>0)%>%
tally() %>%
arrange(desc(n))
count_flight1<-flight_data %>%
group_by(Dest)%>%
filter(ArrDelay>30)
summarize(tot=n())%>%
filter(tot>2500)
count_flight1<-flight_data %>%
group_by(Dest)%>%
filter(ArrDelay>30)%>%
summarize(tot=n())%>%
filter(tot>2500)
(plot1 <- ggplot((data = count_flight1))+
geom_point(aes(Dest,tot))+
ggtitle("Flights with Arrival Delay > 30 for airports")+
xlab("Aiports")+
ylab("Count of arrival delayed flights")+
theme_bw()+
theme(plot.title = element_text(hjust=0.5),axis.text.x = element_text(angle = 90, hjust = 1 )))
(flights_delay<- flight_data%>%
group_by(Dest)%>%
filter(ArrDelay>30))
(flights_delay<- flight_data%>%
group_by(Dest)%>%
filter(ArrDelay>30)%>%
select(FlightNum,TailNum))
library(RSQLite)
library(dplyr)
library(tidyr)
library(tidyverse)
con = dbConnect(SQLite(), "flightsdata.db")
dbListTables(con)
flight_data <- tbl(con, "flights")
flight_data %>%
arrange(Origin)%>%
group_by(Origin)%>%
tally() %>%
arrange(desc(n))
library(RSQLite)
library(dplyr)
library(tidyr)
library(tidyverse)
con = dbConnect(SQLite(), "flightsdata.db")
dbListTables(con)
flight_data <- tbl(con, "flights")
Bussiest_airports<- flight_data %>%
arrange(Origin)%>%
group_by(Origin)%>%
tally() %>%
arrange(desc(n))
#Reporting 10 bussiest airports :
(Bussiest_airports[1:10,])
(Bussiest_airports<- flight_data %>%
arrange(Origin)%>%
group_by(Origin)%>%
tally() %>%
arrange(desc(n))%>%
slice(1:10))
head(Bussiest_airports,10)
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
#library(kableExtra)
library(tidyverse)
library(plyr)
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
#library(kableExtra)
library(tidyverse)
library(plyr)
library(kable)
install.packages("car")
shiny::runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
shiny::runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
shiny::runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
shiny::runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
insertClassMethods("shinycssloaders")
install.packages("shinycssloaders")
runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
df <- data.frame(
x = c(1,2,1),
y = c(1,2,1),
f = c(1,2,3)
)
p <- df %>%
plot_ly(
x = ~x,
y = ~y,
frame = ~f,
type = 'scatter',
mode = 'markers',
showlegend = F
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="animations-basic")
if(interactive()){
library(shiny)
library(shinyanimate)
ui <- fluidPage(
withAnim(),
tags$div(id = 'title', h1('ANIMATION')),
actionButton(inputId = "button", label = "Animate")
)
server <- function(input, output, session){
observeEvent(input$button,{
startAnim(session, 'title', 'bounce')
})
}
shinyApp(ui, server)
}
install.packages("shinyanimate")
if(interactive()){
library(shiny)
library(shinyanimate)
ui <- fluidPage(
withAnim(),
tags$div(id = 'title', h1('ANIMATION')),
actionButton(inputId = "button", label = "Animate")
)
server <- function(input, output, session){
observeEvent(input$button,{
startAnim(session, 'title', 'bounce')
})
}
shinyApp(ui, server)
}
if(interactive()){
library(shiny)
library(shinyanimate)
ui <- fluidPage(
withAnim(),
tags$div(id = 'title', h1('ANIMATION')),
actionButton(inputId = "button", label = "Animate")
)
server <- function(input, output, session){
observeEvent(input$button,{
startAnim(session, 'title', 'bounce')
})
}
shinyApp(ui, server)
}
if(interactive()){
library(shiny)
library(shinyanimate)
ui <- fluidPage(
withAnim(),
tags$div(id = 'title', h1('HOVER ON ME'))
)
server <- function(input, output, session){
observe(addHoverAnim(session, 'title', 'bounce'))
}
shinyApp(ui, server)
}
shiny::runApp('Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny')
setwd("~/Block4/DSCI_532/GitHUB.com/Forked/Mental_Health_Issue_Tracker/src_shiny")
runApp()
